{"version":3,"sources":["post.spec.js"],"names":["posts","Post","name","title","slug","cuid","content","test","before","beforeEach","create","catch","afterEach","always","serial","t","plan","app","get","set","res","is","status","deepEqual","length","body","post","save","send","findOne","exec","savedPost","delete","queriedPost"],"mappings":"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","file":"post.spec.js","sourcesContent":["import test from 'ava';\nimport request from 'supertest';\nimport app from '../../server';\nimport Post from '../post';\nimport { connectDB, dropDB } from '../../util/test-helpers';\n\n// Initial posts added into test db\nconst posts = [\n  new Post({ name: 'Prashant', title: 'Hello Mern', slug: 'hello-mern', cuid: 'f34gb2bh24b24b2', content: \"All cats meow 'mern!'\" }),\n  new Post({ name: 'Mayank', title: 'Hi Mern', slug: 'hi-mern', cuid: 'f34gb2bh24b24b3', content: \"All dogs bark 'mern!'\" }),\n];\n\ntest.before('connect to mockgoose', async () => {\n  await connectDB();\n});\n\ntest.beforeEach('connect and add two post entries', async () => {\n  await Post.create(posts).catch(() => 'Unable to create posts');\n});\n\ntest.afterEach.always(async () => {\n  await dropDB();\n});\n\ntest.serial('Should correctly give number of Posts', async t => {\n  t.plan(2);\n\n  const res = await request(app)\n    .get('/api/posts')\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n  t.deepEqual(posts.length, res.body.posts.length);\n});\n\ntest.serial('Should send correct data when queried against a cuid', async t => {\n  t.plan(2);\n\n  const post = new Post({ name: 'Foo', title: 'bar', slug: 'bar', cuid: 'f34gb2bh24b24b2', content: 'Hello Mern says Foo' });\n  post.save();\n\n  const res = await request(app)\n    .get('/api/posts/f34gb2bh24b24b2')\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n  t.is(res.body.post.name, post.name);\n});\n\ntest.serial('Should correctly add a post', async t => {\n  t.plan(2);\n\n  const res = await request(app)\n    .post('/api/posts')\n    .send({ post: { name: 'Foo', title: 'bar', content: 'Hello Mern says Foo' } })\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n\n  const savedPost = await Post.findOne({ title: 'bar' }).exec();\n  t.is(savedPost.name, 'Foo');\n});\n\ntest.serial('Should correctly delete a post', async t => {\n  t.plan(2);\n\n  const post = new Post({ name: 'Foo', title: 'bar', slug: 'bar', cuid: 'f34gb2bh24b24b2', content: 'Hello Mern says Foo' });\n  post.save();\n\n  const res = await request(app)\n    .delete(`/api/posts/${post.cuid}`)\n    .set('Accept', 'application/json');\n\n  t.is(res.status, 200);\n\n  const queriedPost = await Post.findOne({ cuid: post.cuid }).exec();\n  t.is(queriedPost, null);\n});\n"]}