{"version":3,"sources":["PostCreateWidget.spec.js"],"names":["props","addPost","showAddPost","wrapper","t","truthy","hasClass","find","first","containsMatchingElement","is","length","setProps","falsy","prop","sinon","spy","ref","value","simulate","calledOnce","calledWith","called"],"mappings":"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","file":"PostCreateWidget.spec.js","sourcesContent":["import React from 'react';\nimport test from 'ava';\nimport sinon from 'sinon';\nimport { FormattedMessage } from 'react-intl';\nimport { PostCreateWidget } from '../../components/PostCreateWidget/PostCreateWidget';\nimport { mountWithIntl, shallowWithIntl } from '../../../../util/react-intl-test-helper';\n\nconst props = {\n  addPost: () => {},\n  showAddPost: true,\n};\n\ntest('renders properly', t => {\n  const wrapper = shallowWithIntl(\n    <PostCreateWidget {...props} />\n  );\n\n  t.truthy(wrapper.hasClass('form'));\n  t.truthy(wrapper.hasClass('appear'));\n  t.truthy(wrapper.find('h2').first().containsMatchingElement(<FormattedMessage id=\"createNewPost\" />));\n  t.is(wrapper.find('input').length, 2);\n  t.is(wrapper.find('textarea').length, 1);\n});\n\ntest('hide when showAddPost is false', t => {\n  const wrapper = mountWithIntl(\n    <PostCreateWidget {...props} />\n  );\n\n  wrapper.setProps({ showAddPost: false });\n  t.falsy(wrapper.hasClass('appear'));\n});\n\ntest('has correct props', t => {\n  const wrapper = mountWithIntl(\n    <PostCreateWidget {...props} />\n  );\n\n  t.is(wrapper.prop('addPost'), props.addPost);\n  t.is(wrapper.prop('showAddPost'), props.showAddPost);\n});\n\ntest('calls addPost', t => {\n  const addPost = sinon.spy();\n  const wrapper = mountWithIntl(\n    <PostCreateWidget addPost={addPost} showAddPost />\n  );\n\n  wrapper.ref('name').value = 'David';\n  wrapper.ref('title').value = 'Some Title';\n  wrapper.ref('content').value = 'Bla Bla Bla';\n\n  wrapper.find('a').first().simulate('click');\n  t.truthy(addPost.calledOnce);\n  t.truthy(addPost.calledWith('David', 'Some Title', 'Bla Bla Bla'));\n});\n\ntest('empty form doesn\\'t call addPost', t => {\n  const addPost = sinon.spy();\n  const wrapper = mountWithIntl(\n    <PostCreateWidget addPost={addPost} showAddPost />\n  );\n\n  wrapper.find('a').first().simulate('click');\n  t.falsy(addPost.called);\n});\n"]}