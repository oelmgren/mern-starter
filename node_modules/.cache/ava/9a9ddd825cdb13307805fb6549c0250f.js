'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _reduxAva = require('redux-ava');

var _AppReducer = require('../AppReducer');

var _AppReducer2 = _interopRequireDefault(_AppReducer);

var _AppActions = require('../AppActions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('action for TOGGLE_ADD_POST is working', (0, _reduxAva.reducerTest)(_AppReducer2.default, { showAddPost: false }, (0, _AppActions.toggleAddPost)(), { showAddPost: true }));

(0, _ava2.default)('getShowAddPost selector', function (t) {
  var _rec = new _powerAssertRecorder();

  t.is(_rec._expr(_rec._capt((0, _AppReducer.getShowAddPost)(_rec._capt({
    app: _rec._capt({ showAddPost: false }, 'arguments/0/arguments/0/properties/0/value')
  }, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.is(getShowAddPost({ app: { showAddPost: false } }), false)',
    filepath: 'client/modules/App/__tests__/AppReducer.spec.js',
    line: 14
  }), false);
});
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(_powerAssertRecorder, '_powerAssertRecorder', '/Users/ollieelmgren/Desktop/coding_challenge/client/modules/App/__tests__/AppReducer.spec.js');
}();

;
//# sourceMappingURL=../../../../node_modules/.cache/ava/9a9ddd825cdb13307805fb6549c0250f.js.map