'use strict';

var _index = require('/Users/ollieelmgren/Desktop/coding_challenge/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _asyncToGenerator2 = require('/Users/ollieelmgren/Desktop/coding_challenge/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

var _server = require('../../server');

var _server2 = _interopRequireDefault(_server);

var _post = require('../post');

var _post2 = _interopRequireDefault(_post);

var _testHelpers = require('../../util/test-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initial posts added into test db
var posts = [new _post2.default({ name: 'Prashant', title: 'Hello Mern', slug: 'hello-mern', cuid: 'f34gb2bh24b24b2', content: "All cats meow 'mern!'" }), new _post2.default({ name: 'Mayank', title: 'Hi Mern', slug: 'hi-mern', cuid: 'f34gb2bh24b24b3', content: "All dogs bark 'mern!'" })];

_ava2.default.before('connect to mockgoose', (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee() {
  return _index2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _testHelpers.connectDB)();

        case 2:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
})));

_ava2.default.beforeEach('connect and add two post entries', (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee2() {
  return _index2.default.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return _post2.default.create(posts).catch(function () {
            return 'Unable to create posts';
          });

        case 2:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined);
})));

_ava2.default.afterEach.always((0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee3() {
  return _index2.default.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _testHelpers.dropDB)();

        case 2:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, undefined);
})));

_ava2.default.serial('Should correctly give number of Posts', function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee4(t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder();

    var res;
    return _index2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            t.plan(2);

            _context4.next = 3;
            return (0, _supertest2.default)(_server2.default).get('/api/posts').set('Accept', 'application/json');

          case 3:
            res = _context4.sent;


            t.is(_rec._expr(_rec._capt(_rec._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 32,
              async: true
            }), 200);
            t.deepEqual(_rec2._expr(_rec2._capt(_rec2._capt(posts, 'arguments/0/object').length, 'arguments/0'), {
              content: 't.deepEqual(posts.length, res.body.posts.length)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 33,
              async: true
            }), _rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(res, 'arguments/1/object/object/object').body, 'arguments/1/object/object').posts, 'arguments/1/object').length, 'arguments/1'), {
              content: 't.deepEqual(posts.length, res.body.posts.length)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 33,
              async: true
            }));

          case 6:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x) {
    return _ref4.apply(this, arguments);
  };
}());

_ava2.default.serial('Should send correct data when queried against a cuid', function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee5(t) {
    var _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var post, res;
    return _index2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            t.plan(2);

            post = new _post2.default({ name: 'Foo', title: 'bar', slug: 'bar', cuid: 'f34gb2bh24b24b2', content: 'Hello Mern says Foo' });

            post.save();

            _context5.next = 5;
            return (0, _supertest2.default)(_server2.default).get('/api/posts/f34gb2bh24b24b2').set('Accept', 'application/json');

          case 5:
            res = _context5.sent;


            t.is(_rec4._expr(_rec4._capt(_rec4._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 46,
              async: true
            }), 200);
            t.is(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(_rec5._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object').post, 'arguments/0/object').name, 'arguments/0'), {
              content: 't.is(res.body.post.name, post.name)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 47,
              async: true
            }), _rec6._expr(_rec6._capt(_rec6._capt(post, 'arguments/1/object').name, 'arguments/1'), {
              content: 't.is(res.body.post.name, post.name)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 47,
              async: true
            }));

          case 8:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x2) {
    return _ref5.apply(this, arguments);
  };
}());

_ava2.default.serial('Should correctly add a post', function () {
  var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee6(t) {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder();

    var res, savedPost;
    return _index2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            t.plan(2);

            _context6.next = 3;
            return (0, _supertest2.default)(_server2.default).post('/api/posts').send({ post: { name: 'Foo', title: 'bar', content: 'Hello Mern says Foo' } }).set('Accept', 'application/json');

          case 3:
            res = _context6.sent;


            t.is(_rec7._expr(_rec7._capt(_rec7._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 58,
              async: true
            }), 200);

            _context6.next = 7;
            return _post2.default.findOne({ title: 'bar' }).exec();

          case 7:
            savedPost = _context6.sent;

            t.is(_rec8._expr(_rec8._capt(_rec8._capt(savedPost, 'arguments/0/object').name, 'arguments/0'), {
              content: 't.is(savedPost.name, \'Foo\')',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 61,
              async: true
            }), 'Foo');

          case 9:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  }));

  return function (_x3) {
    return _ref6.apply(this, arguments);
  };
}());

_ava2.default.serial('Should correctly delete a post', function () {
  var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_index2.default.mark(function _callee7(t) {
    var _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    var post, res, queriedPost;
    return _index2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            t.plan(2);

            post = new _post2.default({ name: 'Foo', title: 'bar', slug: 'bar', cuid: 'f34gb2bh24b24b2', content: 'Hello Mern says Foo' });

            post.save();

            _context7.next = 5;
            return (0, _supertest2.default)(_server2.default).delete('/api/posts/' + post.cuid).set('Accept', 'application/json');

          case 5:
            res = _context7.sent;


            t.is(_rec9._expr(_rec9._capt(_rec9._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 74,
              async: true
            }), 200);

            _context7.next = 9;
            return _post2.default.findOne({ cuid: post.cuid }).exec();

          case 9:
            queriedPost = _context7.sent;

            t.is(_rec10._expr(_rec10._capt(queriedPost, 'arguments/0'), {
              content: 't.is(queriedPost, null)',
              filepath: 'server/models/__tests__/post.spec.js',
              line: 77,
              async: true
            }), null);

          case 11:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  }));

  return function (_x4) {
    return _ref7.apply(this, arguments);
  };
}());
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(posts, 'posts', '/Users/ollieelmgren/Desktop/coding_challenge/server/models/__tests__/post.spec.js');

  __REACT_HOT_LOADER__.register(_powerAssertRecorder, '_powerAssertRecorder', '/Users/ollieelmgren/Desktop/coding_challenge/server/models/__tests__/post.spec.js');
}();

;
//# sourceMappingURL=../../../node_modules/.cache/ava/854d712565c85b54b608440513156fb5.js.map